트랜잭션이란 쪼갤 수 없는 업무 처리의 최소 단위 라고 한다. 
이게 무슨 뜻이냐면, 예를 들어 은행에서 업무를 처리하는 기계가 있다고
가정해보자. 이 기계는 A 계좌에서 B 계좌로 돈을 이체해야 하는데 이 경우
A에서 돈을 빼고 B 에서 돈을 더하는 2가지의 update 작업을 하게 된다. 
'계좌 이체' 라는 것은 하나의 과정이지만 2개의 업데이트가 일어남으로 하나의
기능이라 할 수 있다. 이 계좌를 이체하는 2개의 업데이트가 하나의 
'트랜잭션' 으로 묶여있다고 말할 수 있다.

그렇다면 트랜잭션은 어떠한 성질을 가지는가?
DB 에서 데이터를 다룰 때 장애가 일어날 경우 데이터를 복구하는 작업의
단위가 된다. 즉 계좌 이체를 하는 2가지의 업데이트중 한가지 만이라도 되지
않는다면 그 트랜잭션은 전체가 수행되지 않아야 하는것이다.
반대로 2개 다 성공적으로 실행이 된다면 수행되는 All or Notjhing 의 구조이
어야만 한다.
또한 동시에 실행되는 트랜잭션들이 서로에게 영향을 미지치 않아야만 한다.

더 디테일한 예시는 다음과 같다.

1. A계좌의 값을 데이터베이스에서 주 기억 장치 버퍼로 읽어온다.
2. B계좌의 값을 데이터베이스에서 주 기억 장치 버퍼로 읽어온다.
3. A 계좌에서 1,000,000원을 인출한 값을 저장한다.
4. B 계좌에서  1,000,000원을 입금한 값을 저장한다.
5. A 계좌의 값을 주 기억 장치 버퍼에서 데이터베이스에 기록한다.
6. B 계좌의 값을 주 기억 장치 버퍼에서 데이터베이스에 기록한다.

위와 같은 과정에서 모두 true 가 일어나면 트랜잭션이 성공적으로 이루어 진
것이지만 false 가 하나라도 일어날 경우 실행 되는 작업을 
롤백(RollBack) 이라고 한다. 

이러한 작업을 쉽게 할 수 있게 돕는게 Spring 에서 @Transactional 
어노테이션 이다.
이게 어떠한 역할을 하느냐 하면 클래스나 메서드에 작성되면 트랜잭션
기능이 적용된 프록시 객체가 생성 된다. 생성된 프록시 객체는 
PlatFormTransactionManager 를 사용하여 트랜잭션을 시작하고 동작에 따라
rollBack 과 Commit 을 결정한다.

보통 JPA 기능중에 CrudRepository 에는 자체적으로 @Transactional 을 
가지고 있다.
